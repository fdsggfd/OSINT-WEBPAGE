<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>OSINT Dashboard</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        /* Apply the Inter font globally */
        body {
            font-family: 'Inter', sans-serif;
            background-color: #111827; /* Dark blue-grey background */
        }
        /* --- Base Dashboard Styles --- */
        .dashboard-bg { background-color: #1f2937; border: 1px solid #374151; }
        .dashboard-text { color: #e5e7eb; }
        .dashboard-input { background-color: #374151; border: 1px solid #4b5563; color: #e5e7eb; padding: 10px; border-radius: 0.375rem; outline: none; width: 100%; transition: border-color 0.2s ease, box-shadow 0.2s ease; }
        .dashboard-input:focus { border-color: #3b82f6; box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.4); }
        .dashboard-input::placeholder { color: #9ca3af; }
        .dashboard-button { background-color: #3b82f6; color: #ffffff; padding: 10px 20px; border-radius: 0.375rem; cursor: pointer; transition: background-color 0.2s ease; font-weight: 500; margin-left: 12px; border: none; }
        .dashboard-button:hover { background-color: #2563eb; }
        .dashboard-tab { border: 1px solid transparent; border-bottom: none; padding: 12px 18px; cursor: pointer; color: #9ca3af; transition: all 0.2s ease; margin-right: 4px; position: relative; bottom: -1px; display: inline-flex; align-items: center; gap: 8px; border-radius: 6px 6px 0 0; }
        .dashboard-tab:hover { background-color: #374151; color: #e5e7eb; }
        .dashboard-tab.active { border-color: #374151; color: #ffffff; background-color: #1f2937; border-bottom: 1px solid #1f2937; z-index: 10; font-weight: 500; }
        .dashboard-content { border: 1px solid #374151; padding: 24px; min-height: 350px; position: relative; background-color: #1f2937; border-radius: 0 0 8px 8px; }
        .tab-pane { display: none; animation: fadeIn 0.3s ease-out; }
        .tab-pane.active { display: block; }
        @keyframes fadeIn { from { opacity: 0; transform: translateY(5px); } to { opacity: 1; transform: translateY(0); } }
        .tab-icon { width: 18px; height: 18px; stroke: currentColor; /* Use currentColor for easier state changes */ stroke-width: 2; fill: none; stroke-linecap: round; stroke-linejoin: round; }
        .dashboard-tab .tab-icon { stroke: #9ca3af; } /* Default icon color */
        .dashboard-tab:hover .tab-icon { stroke: #e5e7eb; } /* Hover icon color */
        .dashboard-tab.active .tab-icon { stroke: #ffffff; } /* Active icon color */

        /* --- Base Results Area (for non-IP/Phone/Social/Email) --- */
        .results-area { margin-top: 1.5rem; white-space: pre-wrap; background-color: #111827; padding: 16px; border-radius: 0.375rem; min-height: 200px; color: #d1d5db; font-family: monospace; font-size: 0.9em; border: 1px solid #374151; overflow-x: auto; }

        /* --- Container Styling (Shared by IP/Phone/Social/Email Results) --- */
        .results-display-container { font-family: 'Inter', sans-serif; font-size: 1rem; white-space: normal; color: #e5e7eb; background-color: transparent; padding: 0; border: none; margin-top: 1.5rem; min-height: 200px; }
        /* --- Styling for Info Items (Shared) --- */
        .results-display-container .info-item { background-color: #374151; padding: 0.6rem 0.9rem; border-radius: 4px; border: none; text-align: left; cursor: default; color: #e5e7eb; width: 100%; margin-bottom: 0.5rem; }
        .results-display-container .info-item:last-child { margin-bottom: 0; }
        .results-display-container .info-item h6 { font-size: 0.75rem; color: #9ca3af; margin-bottom: 0.25rem; font-weight: 500; text-transform: uppercase; display: flex; align-items: center; gap: 0.3rem; } /* Flex for icon alignment */
        .results-display-container .info-item p { font-size: 0.95rem; font-weight: 500; color: #e5e7eb; margin: 0; display: flex; align-items: center; gap: 0.5rem; word-break: break-word; }
        .results-display-container .info-wrapper { display: grid; grid-template-columns: repeat(auto-fit, minmax(180px, 1fr)); gap: 0.75rem; margin-bottom: 1rem; }
        .results-display-container .data-section { margin-bottom: 1.5rem; padding-bottom: 1rem; border-bottom: 1px solid #374151; }
        .results-display-container .data-section:last-child { border-bottom: none; margin-bottom: 0; padding-bottom: 0; }
        .results-display-container .data-section h6.label { font-size: 0.9rem; font-weight: 600; color: #9ca3af; margin-bottom: 0.75rem; text-transform: uppercase; }
        .results-display-container .info-item p .icon { width: 1em; height: 1em; display: inline-block; vertical-align: middle; margin-right: 0.3em; stroke-width: 2; } /* Basic icon style */
        .results-display-container .spinner { display: none; border: 4px solid rgba(229, 231, 235, 0.2); border-left-color: #3b82f6; border-radius: 50%; width: 30px; height: 30px; animation: spin 1s linear infinite; margin: 2rem auto; }
        .results-display-container .spinner.visible { display: block; }
        @keyframes spin { to { transform: rotate(360deg); } }
        .error-message { background-color: #4b1d1d; color: #fecaca; border: 1px solid #991b1b; padding: 0.75rem 1rem; border-radius: 4px; font-family: monospace; white-space: pre-wrap; }

        /* --- CSS Specific to IP Results --- */
        .ip-results-container .tabs .tabbar { display: flex; border-bottom: 1px solid #4b5563; margin-bottom: 1rem; flex-wrap: wrap; /* Allow tabs to wrap */ }
        .ip-results-container .tabs .tab { padding: 0.75rem 1rem; margin-right: 0.25rem; margin-bottom: -1px; /* Overlap border */ border: 1px solid transparent; border-bottom: none; border-radius: 4px 4px 0 0; cursor: pointer; color: #9ca3af; background-color: transparent; transition: all 0.2s ease; font-weight: 500; font-size: 0.9rem; white-space: nowrap; /* Prevent tab text wrapping */ }
        .ip-results-container .tabs .tab:hover { background-color: #374151; color: #e5e7eb; }
        .ip-results-container .tabs .tab.tab-is-active { color: #ffffff; background-color: #1f2937; border-color: #4b5563; border-bottom-color: #1f2937; position: relative; z-index: 1; }
        .ip-results-container .tab-content { display: none; padding: 1rem 0; animation: fadeIn 0.3s ease-out; }
        .ip-results-container .tab-content.tab-content-is-visible { display: block; }
        .ip-results-container .map-ip-country { display: flex; gap: 1rem; margin-bottom: 1rem; flex-wrap: wrap; }
        .ip-results-container .map-wrapper { max-width: 230px; flex-shrink: 0; background-color: #374151; border-radius: 4px; display: flex; align-items: center; justify-content: center; min-height: 140px; /* Ensure wrapper has height even if image fails */ }
        .ip-results-container .map { display: block; max-width: 100%; height: auto; border-radius: 4px; }
        .ip-results-container .ip-country { display: flex; flex-direction: column; gap: 0.5rem; flex-grow: 1; }
        .ip-results-container .info-item-is-big { padding: 0.8rem 1rem; }
        .ip-results-container .info-country { display: flex; align-items: center; gap: 0.5rem; }
        .ip-results-container .info-country-flag { width: 24px; height: auto; border-radius: 2px; background-color: #4b5563; /* Placeholder bg */ }
        .ip-results-container .info-item-copy-icon { width: 16px; height: 16px; opacity: 0.7; margin-left: auto; cursor: pointer; }
        .ip-results-container .info-item-copy-icon path, .ip-results-container .info-item-copy-icon rect { fill: #9ca3af; }
        .ip-results-container .info-item-copy-icon:hover path, .ip-results-container .info-item-copy-icon:hover rect { fill: #e5e7eb; }
        .ip-results-container .info-item-copy { cursor: pointer; transition: background-color 0.2s ease; }
        .ip-results-container .info-item-copy:hover { background-color: #4b5563; }
        .ip-results-container .info-wrapper-two-cols { grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); }
        .ip-results-container .info-wrapper-stacked .info-item { margin-bottom: 0.5rem; }
        .ip-results-container .info-wrapper-stacked .info-item:last-child { margin-bottom: 0; }
        .ip-results-container .info-item-with-icon { display: flex; align-items: center; gap: 0.5rem; }
        .ip-results-container .info-item-with-icon svg { width: 18px; height: 18px; flex-shrink: 0; }
        .ip-results-container .info-item-is-safe p { color: #34d399; font-weight: 600; }
        .ip-results-container .info-item-is-warning p { color: #f59e0b; font-weight: 600; }
        .ip-results-container .info-item-is-danger p { color: #ef4444; font-weight: 600; }
        .ip-results-container .threats-flag { background-color: #374151; padding: 0.5rem 0.8rem; border-radius: 4px; text-align: center; }
        .ip-results-container .threats-flag p { font-size: 0.85rem; font-weight: 500; color: #e5e7eb; margin:0; display: flex; justify-content: space-between; gap: 0.5rem; }
        .ip-results-container pre { background-color: #111827; padding: 1rem; border-radius: 4px; overflow-x: auto; border: 1px solid #374151; max-height: 400px; }
        .ip-results-container code { font-family: monospace; font-size: 0.85em; color: #d1d5db; white-space: pre; }

        /* --- CSS Specific to Phone Results --- */
        .phone-results-container .whatsapp-profile { display: flex; align-items: center; gap: 1rem; margin-bottom: 1rem; background-color: #374151; padding: 1rem; border-radius: 4px;}
        .phone-results-container .whatsapp-pic { width: 60px; height: 60px; border-radius: 50%; object-fit: cover; border: 2px solid #4b5563; flex-shrink: 0; background-color: #4b5563; } /* Added bg color */
        .phone-results-container .whatsapp-about { font-style: italic; color: #d1d5db; font-size: 0.9em; margin-top: 0.25rem; }

        /* --- CSS for Social Media Results --- */
        .social-results-container .social-icon { width: 1.2em; height: 1.2em; margin-right: 0.5em; vertical-align: middle; } /* Style for platform icons */
        .social-results-container .info-item p .text-yellow-400 { color: #f59e0b; } /* Error/Timeout color */
        .social-results-container .info-item p .text-gray-400 { color: #9ca3af; } /* Checking/Unknown color */

        /* --- CSS for Email Results (LeakCheck) --- */
        .email-results-container .breach-item { background-color: #374151; padding: 1rem; border-radius: 4px; margin-bottom: 1rem; border-left: 4px solid #3b82f6; }
        .email-results-container .breach-item h6 { font-size: 1rem; font-weight: 600; color: #e5e7eb; margin-bottom: 0.5rem; }
        .email-results-container .breach-details { display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 0.5rem 1rem; font-size: 0.9rem; }
        .email-results-container .breach-details span { color: #9ca3af; }
        .email-results-container .breach-details strong { color: #e5e7eb; font-weight: 500; }
        .email-results-container .breach-fields { margin-top: 0.75rem; font-size: 0.85rem; }
        .email-results-container .breach-fields span { color: #9ca3af; }
        .email-results-container .breach-fields code { background-color: #4b5563; color: #e5e7eb; padding: 0.1rem 0.4rem; border-radius: 3px; font-family: monospace; }
        .email-results-container .no-breaches { background-color: #374151; padding: 1rem; border-radius: 4px; text-align: center; color: #9ca3af; font-style: italic; }
        .email-results-container .quota-info { text-align: right; font-size: 0.8rem; color: #6b7280; margin-top: 0.5rem; }

    </style>
</head>
<body class="dashboard-text p-4 md:p-8 text-base">

    <div class="max-w-5xl mx-auto dashboard-bg shadow-xl shadow-black/30 rounded-lg overflow-hidden">
        <div class="bg-gradient-to-r from-gray-800 to-gray-900 p-3 border-b border-gray-700 text-center text-sm tracking-wider">
            <span class="font-semibold text-white">OSINT DASHBOARD</span> :: [ STATUS: <span class="text-green-400">READY</span> ]
        </div>

        <div class="border-b border-gray-700 px-4 pt-2 flex flex-wrap">
            <button class="dashboard-tab active" data-tab="username"> <svg class="tab-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path><circle cx="12" cy="7" r="4"></circle></svg> Username </button>
            <button class="dashboard-tab" data-tab="email"> <svg class="tab-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><rect width="20" height="16" x="2" y="4" rx="2"></rect><path d="m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7"></path></svg> Email </button>
            <button class="dashboard-tab" data-tab="phone"> <svg class="tab-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"></path></svg> Phone </button>
            <button class="dashboard-tab" data-tab="ip"> <svg class="tab-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><rect x="16" y="16" width="6" height="6" rx="1"></rect><rect x="2" y="16" width="6" height="6" rx="1"></rect><rect x="9" y="2" width="6" height="6" rx="1"></rect><path d="M5 16v-3a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1v3"></path><path d="M12 12V8"></path></svg> IP Address </button>
            <button class="dashboard-tab" data-tab="address"> <svg class="tab-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z"></path><circle cx="12" cy="10" r="3"></circle></svg> Address </button>
            <button class="dashboard-tab" data-tab="social">
                <svg class="tab-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                    <path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"></path><circle cx="9" cy="7" r="4"></circle><path d="M22 21v-2a4 4 0 0 0-3-3.87"></path><path d="M16 3.13a4 4 0 0 1 0 7.75"></path>
                </svg>
                Social Media
            </button>
        </div>

        <div class="dashboard-content">
            <div id="username-content" class="tab-pane active">
                <label for="username-input" class="block mb-2 text-sm font-medium text-gray-300">Username Search</label>
                <div class="flex items-center">
                    <input type="text" id="username-input" class="dashboard-input flex-grow" placeholder="Enter username...">
                    <button class="dashboard-button" onclick="performSearch('username')">Search</button>
                </div>
                <div id="username-results" class="results-area">// Awaiting username search command...</div>
            </div>

            <div id="email-content" class="tab-pane">
                <label for="email-input" class="block mb-2 text-sm font-medium text-gray-300">Email Breach Check (LeakCheck Simulation)</label>
                <div class="flex items-center">
                    <input type="email" id="email-input" class="dashboard-input flex-grow" placeholder="Enter email address...">
                    <button class="dashboard-button" onclick="performSearch('email')">Search</button>
                </div>
                <div id="email-results" class="results-display-container email-results-container">// Awaiting email search command...</div>
            </div>

            <div id="phone-content" class="tab-pane">
                <label for="phone-input" class="block mb-2 text-sm font-medium text-gray-300">Phone Number Lookup (Simulation)</label>
                <div class="flex items-center">
                    <input type="tel" id="phone-input" class="dashboard-input flex-grow" placeholder="Enter phone number (E.164 format, e.g., +12345678900)...">
                    <button class="dashboard-button" onclick="performSearch('phone')">Search</button>
                </div>
                <div id="phone-results" class="results-display-container phone-results-container">// Awaiting phone lookup command...</div>
            </div>

            <div id="ip-content" class="tab-pane">
                <label for="ip-input" class="block mb-2 text-sm font-medium text-gray-300">IP Address Analysis (Simulation)</label>
                <div class="flex items-center">
                    <input type="text" id="ip-input" class="dashboard-input flex-grow" placeholder="Enter IP address...">
                    <button class="dashboard-button" onclick="performSearch('ip')">Search</button>
                </div>
                <div id="ip-results" class="results-display-container ip-results-container">// Awaiting IP analysis command...</div>
            </div>

            <div id="address-content" class="tab-pane">
                <label for="address-input" class="block mb-2 text-sm font-medium text-gray-300">Address Lookup (Simulation)</label>
                <div class="flex items-center">
                    <input type="text" id="address-input" class="dashboard-input flex-grow" placeholder="Enter physical address...">
                    <button class="dashboard-button" onclick="performSearch('address')">Search</button>
                </div>
                <div id="address-results" class="results-area">// Awaiting address lookup command...</div>
            </div>

            <div id="social-content" class="tab-pane">
                <label for="social-input" class="block mb-2 text-sm font-medium text-gray-300">Social Media Email Check (Simulation)</label>
                <div class="flex items-center">
                    <input type="email" id="social-input" class="dashboard-input flex-grow" placeholder="Enter email address...">
                    <button class="dashboard-button" onclick="performSearch('social')">Check</button>
                </div>
                <div id="social-results" class="results-display-container social-results-container">// Awaiting social media check command...</div>
            </div>
        </div>
    </div>

    <script>
        // --- Main Dashboard Tab Switching Logic ---
        const mainTabs = document.querySelectorAll('.dashboard-tab');
        const mainTabPanes = document.querySelectorAll('.tab-pane');

        mainTabs.forEach(tab => {
            tab.addEventListener('click', () => {
                const targetTab = tab.getAttribute('data-tab');
                const targetPane = document.getElementById(targetTab + '-content');

                mainTabs.forEach(t => t.classList.remove('active'));
                mainTabPanes.forEach(p => p.classList.remove('active'));

                tab.classList.add('active');
                if (targetPane) {
                    targetPane.classList.add('active');
                } else {
                    console.error(`Content pane not found for main tab: ${targetTab}`);
                }
            });
        });
        // --- End of Main Dashboard Tab Logic ---

        // --- Helper Functions ---
        // Safely gets nested property values, returns default if path is invalid or value is null/undefined
        const get = (obj, path, defaultValue = '—') => {
            if (!obj || typeof path !== 'string') return defaultValue;
            const value = path.split('.').reduce((o, k) => (o && typeof o === 'object' ? o[k] : undefined), obj);
            return (value !== undefined && value !== null) ? value : defaultValue;
        };

        // Basic HTML sanitizer
        const sanitize = (str) => {
            if (typeof str !== 'string') return str;
            const temp = document.createElement('div');
            temp.textContent = str;
            return temp.innerHTML;
        };

        // Formats boolean values with consistent styling
        const formatBoolean = (value, trueText = 'True', falseText = 'False') => {
            const isTrue = Boolean(value);
            const text = isTrue ? sanitize(trueText) : sanitize(falseText);
            const colorClass = isTrue ? 'text-green-400 font-semibold' : 'text-red-400';
            return `<span class="${colorClass}">${text}</span>`;
        };

        // Copies text to clipboard and provides user feedback (optional)
        function copyToClipboard(text, elementToSignal = null) {
            navigator.clipboard.writeText(text).then(() => {
                console.log('Copied to clipboard:', text);
                if (elementToSignal) {
                    const originalText = elementToSignal.innerHTML;
                    elementToSignal.innerHTML = 'Copied!';
                    elementToSignal.style.opacity = '0.7';
                    setTimeout(() => {
                        elementToSignal.innerHTML = originalText;
                        elementToSignal.style.opacity = '1';
                    }, 1500);
                }
            }).catch(err => {
                console.error('Failed to copy text: ', err);
                if (elementToSignal) {
                     elementToSignal.innerHTML = 'Copy Failed';
                     setTimeout(() => { elementToSignal.innerHTML = text; }, 1500);
                }
            });
        }

        // Renders a standard error message block
        function renderError(message) {
            return `<div class="error-message">// Error:\n// ${sanitize(message)}\n// Check console for details.</div>`;
        }

        // Displays a loading spinner or message
        function showLoading(resultsElement, searchType) {
             if (['ip', 'phone', 'social', 'email'].includes(searchType)) {
                resultsElement.innerHTML = `<div class="spinner visible" style="margin: 2rem auto;"></div><p class="text-center mt-2 text-gray-400">// Contacting simulation server for ${searchType}...</p>`;
            } else {
                resultsElement.textContent = `// Contacting simulation server for ${searchType}...`;
            }
        }

        // --- Main Search Function (Calls Netlify Functions) ---
        async function performSearch(searchType) {
            const inputElement = document.getElementById(searchType + '-input');
            const resultsElement = document.getElementById(searchType + '-results');
            if (!inputElement || !resultsElement) {
                console.error(`Input or Results element not found for type: ${searchType}`);
                return;
            }

            const query = inputElement.value.trim();
            if (!query) {
                resultsElement.innerHTML = `// Input required for ${searchType} search...`;
                return;
            }

            showLoading(resultsElement, searchType);

            let functionPath = '';
            let requiresJson = true; // Most functions expect JSON

            // --- Determine the Netlify Function endpoint ---
            switch (searchType) {
                case 'username':
                    functionPath = '/.netlify/functions/generic-lookup';
                    requiresJson = false; // This one might return text
                    break;
                case 'email':
                    functionPath = '/.netlify/functions/email-check';
                    break;
                case 'phone':
                    // Basic E.164 format check (client-side)
                    if (!/^\+[1-9]\d{1,14}$/.test(query)) {
                         resultsElement.innerHTML = renderError('Phone number must be in E.164 format (e.g., +12345678900).');
                         return;
                    }
                    functionPath = '/.netlify/functions/phone-lookup';
                    break;
                case 'ip':
                     // Basic IP format check (client-side) - very rudimentary
                    if (!/^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$/.test(query) && !/^[a-fA-F0-9:]+$/.test(query)) {
                         resultsElement.innerHTML = renderError('Please enter a valid IPv4 or IPv6 address.');
                         return;
                    }
                    functionPath = '/.netlify/functions/ip-lookup';
                    break;
                case 'address':
                    functionPath = '/.netlify/functions/generic-lookup';
                     requiresJson = false;
                    break;
                case 'social':
                     // Basic email format check (client-side)
                    if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(query)) {
                         resultsElement.innerHTML = renderError('Please enter a valid email address for social check.');
                         return;
                    }
                    functionPath = '/.netlify/functions/social-check';
                    break;
                default:
                    resultsElement.innerHTML = renderError(`Unknown search type: ${searchType}`);
                    return;
            }

            // --- Call the Netlify Function ---
            try {
                const response = await fetch(`${functionPath}?query=${encodeURIComponent(query)}&type=${searchType}`); // Pass type for generic handlers

                if (!response.ok) {
                    // Try to get error message from response body, otherwise use status text
                    let errorText = response.statusText;
                    try {
                        const errorData = await response.json();
                        errorText = errorData.error || errorData.message || JSON.stringify(errorData);
                    } catch (e) {
                        // If parsing JSON fails, maybe it's plain text
                        try {
                            errorText = await response.text();
                        } catch (e2) { /* Ignore further errors */ }
                    }
                    throw new Error(`Function Error (${response.status}): ${errorText}`);
                }

                // --- Process the response ---
                if (requiresJson) {
                    const data = await response.json();
                    // Call the appropriate rendering function based on search type
                    switch (searchType) {
                        case 'email':
                            resultsElement.innerHTML = generateEmailResultHtml(data, query);
                            break;
                        case 'phone':
                            resultsElement.innerHTML = generatePhoneResultHtml(data, query);
                            break;
                        case 'ip':
                            resultsElement.innerHTML = generateIpResultHtml(data, query);
                            setupIpResultTabs(resultsElement); // Re-attach tab listeners
                            break;
                        case 'social':
                            resultsElement.innerHTML = generateSocialResultHtml(data);
                            break;
                        default: // Should not happen if requiresJson is true, but as fallback
                             resultsElement.textContent = JSON.stringify(data, null, 2);
                    }
                } else {
                     // Handle plain text responses (for username, address simulations)
                     const textData = await response.text();
                     resultsElement.textContent = textData; // Display raw text in the results area
                }

            } catch (error) {
                console.error(`Search failed for type ${searchType}:`, error);
                resultsElement.innerHTML = renderError(error.message || 'An unknown error occurred.');
            }
        }

        // --- Result Generation Functions ---

        // Generates HTML for Email Breach Check (LeakCheck Simulation)
        function generateEmailResultHtml(data, email) {
             if (!data || !data.success) {
                return renderError(data?.error || 'Failed to get valid response from email check simulation.');
            }

            let html = `<div class="email-results-container results-display-container">`;
            html += `<h6 class="text-lg font-semibold mb-4">Breach Report for: ${sanitize(email)}</h6>`;

            if (data.found > 0 && Array.isArray(data.result)) {
                 data.result.forEach(breach => {
                    html += `<div class="breach-item">`;
                    html += `<h6>${sanitize(get(breach, 'source.name', 'Unknown Source'))}</h6>`;
                    html += `<div class="breach-details">`;
                    html += `<div><span>Breach Date:</span> <strong>${sanitize(get(breach, 'source.breach_date', 'N/A'))}</strong></div>`;
                    html += `<div><span>Username:</span> <strong>${sanitize(get(breach, 'username', 'N/A'))}</strong></div>`;
                    html += `<div><span>First Name:</span> <strong>${sanitize(get(breach, 'first_name', 'N/A'))}</strong></div>`;
                    html += `<div><span>Last Name:</span> <strong>${sanitize(get(breach, 'last_name', 'N/A'))}</strong></div>`;
                    // Add other potential fields if needed, checking if they exist
                    html += `</div>`; // end breach-details

                    const fields = get(breach, 'fields', []);
                    if (Array.isArray(fields) && fields.length > 0) {
                        html += `<div class="breach-fields">`;
                        html += `<span>Fields in breach:</span> ${fields.map(f => `<code>${sanitize(f)}</code>`).join(' ')}`;
                        html += `</div>`;
                    }
                    html += `</div>`; // end breach-item
                 });
            } else {
                html += `<div class="no-breaches">No breaches found for this email in the simulated database.</div>`;
            }

            html += `<div class="quota-info">Simulated Quota Remaining: ${get(data, 'quota', 'N/A')}</div>`;
            html += `</div>`; // end email-results-container
            return html;
        }


        // Generates HTML for Phone Lookup Results (Simulation)
        function generatePhoneResultHtml(data, phoneNumber) {
             // Expects data to be { phoneLookup: {...}, whatsApp: {...} } from the Netlify function
             const lookupData = data?.phoneLookup?.data || {};
             const waData = data?.whatsApp || {};
             const lookupError = data?.phoneLookup?.error;
             const waError = data?.whatsApp?.error;

            let html = `<div class="phone-results-container results-display-container">`;
            html += `<h6 class="text-lg font-semibold mb-4">Report for: ${sanitize(phoneNumber)}</h6>`;

            // Section for Phone Lookup Info
            html += `<section class="data-section">`;
            html += `<h6 class="label">Phone Lookup Info (Simulated)</h6>`;
            if (lookupError) {
                 html += `<p class="text-red-400 p-2">// Error fetching lookup info: ${sanitize(lookupError)}</p>`;
            } else if (Object.keys(lookupData).length > 0) {
                html += `<div class="info-wrapper">`;
                html += `<div class="info-item"><h6><svg class="icon w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>Valid Number</h6><p>${formatBoolean(get(lookupData, 'valid_number'))}</p></div>`;
                html += `<div class="info-item"><h6>National Format</h6><p>${sanitize(get(lookupData, 'national_format'))}</p></div>`;
                html += `<div class="info-item"><h6><svg class="icon w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path></svg>Country</h6><p>${sanitize(get(lookupData, 'country_code'))}</p></div>`;
                html += `<div class="info-item"><h6><svg class="icon w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.111 16.404a5.5 5.5 0 017.778 0M12 20h.01m-7.08-7.071c3.904-3.904 10.236-3.904 14.141 0M1.394 9.393c5.857-5.857 15.355-5.857 21.213 0"></path></svg>Carrier</h6><p>${sanitize(get(lookupData, 'carrier.name'))}</p></div>`;
                html += `<div class="info-item"><h6>Carrier Type</h6><p>${sanitize(get(lookupData, 'carrier.type'))}</p></div>`;
                html += `</div>`;
             } else {
                 html += `<p class="text-gray-400 p-2 italic">// No lookup data available in simulation.</p>`;
             }
            html += `</section>`;

            // Section for WhatsApp Info
            html += `<section class="data-section">`;
            html += `<h6 class="label">WhatsApp Info (Simulated)</h6>`;
             if (waError) {
                 html += `<p class="text-red-400 p-2">// Error fetching WhatsApp info: ${sanitize(waError)}</p>`;
             } else if (Object.keys(waData).length > 0 && get(waData, 'isWAContact') !== '—') { // Check if there's actual data
                const profilePicUrl = get(waData, 'profilePic', null);
                // Only show profile section if picture URL exists
                if (profilePicUrl && profilePicUrl !== '—') {
                    html += `<div class="whatsapp-profile">`;
                    // Added placeholder image on error
                    html += `<img src="${sanitize(profilePicUrl)}" alt="WhatsApp Profile Pic" class="whatsapp-pic" onerror="this.onerror=null; this.src='https://placehold.co/60x60/4b5563/9ca3af?text=N/A';">`;
                    html += `<div>`;
                    html += `<p class="font-semibold">${sanitize(get(waData, 'number'))}</p>`;
                    html += `<p class="whatsapp-about">About: ${sanitize(get(waData, 'about'))}</p>`;
                    html += `</div>`;
                    html += `</div>`;
                } else {
                     html += `<p class="text-gray-400 text-sm mb-3 italic">No public WhatsApp profile picture or 'About' found in simulation.</p>`;
                }

                html += `<div class="info-wrapper">`;
                html += `<div class="info-item"><h6><svg class="icon w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>Registered</h6><p>${formatBoolean(get(waData, 'isWAContact'))}</p></div>`;
                html += `<div class="info-item"><h6><svg class="icon w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2 2v2m4 6h.01M5 20h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path></svg>Is Business</h6><p>${formatBoolean(get(waData, 'isBusiness'))}</p></div>`;
                html += `<div class="info-item"><h6><svg class="icon w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 18h.01M8 21h8a2 2 0 002-2V5a2 2 0 00-2-2H8a2 2 0 00-2 2v14a2 2 0 002 2z"></path></svg>Number Type</h6><p>${sanitize(get(waData, 'type'))}</p></div>`;
                html += `</div>`;
            } else {
                 html += `<p class="text-gray-400 p-2 italic">// No WhatsApp data available in simulation.</p>`;
            }
            html += `</section>`;

            html += `</div>`; // end phone-results-container
            return html;
        }

        // Generates HTML for IP Lookup Results (Simulation)
        function generateIpResultHtml(data, ipAddress) {
            if (!data || typeof data !== 'object') {
                return renderError('Invalid data received from IP lookup simulation.');
            }

            // Use placeholder for map image URL - replace with actual if needed, but requires API key
            const mapPlaceholderUrl = `https://placehold.co/230x140/374151/9ca3af?text=Map+Placeholder`;
            const mapImageUrl = mapPlaceholderUrl; // In a real scenario: `https://api.mapbox.com/styles/v1/mapbox/streets-v11/static/${get(data, 'longitude', 0)},${get(data, 'latitude', 0)},9,0/230x140@2x?access_token=YOUR_MAPBOX_TOKEN`;

            const trustScore = get(data, 'threat.scores.trust_score', -1);
            let trustLevel = 'Unknown';
            let trustClass = '';
            if (trustScore >= 0 && trustScore !== '—') { // Check it's a valid number
                 trustLevel = 'Low risk'; trustClass = 'info-item-is-safe';
                 if (trustScore < 50) { trustLevel = 'Medium risk'; trustClass = 'info-item-is-warning'; }
                 if (trustScore < 25) { trustLevel = 'High risk'; trustClass = 'info-item-is-danger'; }
            } else {
                 trustLevel = 'N/A';
            }
            const flagUrl = get(data, 'flag', '');
            const flagPlaceholder = `https://placehold.co/24x18/4b5563/9ca3af?text=${get(data, 'country_code', '??')}`;

            // --- Start HTML Generation ---
            let html = `
<div data-role="tabs" class="tabs tabs-visible">
    <div role="tablist" class="tabbar">
        <button class="tab tab-is-active" role="tab" data-tab-target="general-tab">Summary</button>
        <button class="tab" role="tab" data-tab-target="threats-tab">Threats</button>
        <button class="tab" role="tab" data-tab-target="organisation-tab">Organisation</button>
        <button class="tab" role="tab" data-tab-target="country-tab">Geolocation</button>
        <button class="tab" role="tab" data-tab-target="raw-data-tab">Raw Data</button>
    </div>

    <div class="tab-content tab-content-is-visible" role="tabpanel" id="general-tab">
        <div class="map-ip-country">
            <div class="map-wrapper">
                <img src="${mapImageUrl}" width="230" height="140" class="map" alt="Map placeholder for ${sanitize(ipAddress)}" onerror="this.style.display='none'; this.closest('.map-wrapper').innerHTML='<p class=text-xs text-gray-400>Map N/A</p>';">
            </div>
            <div class="ip-country">
                <button class="info-item info-item-copy info-item-is-big" title="Click to copy IP" onclick="copyToClipboard('${sanitize(ipAddress)}', this.querySelector('p'))">
                    <h6>IP Address</h6>
                    <p>${sanitize(ipAddress)}<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" class="info-item-copy-icon" viewBox="0 0 24 24"><g fill="none" fill-rule="evenodd"><path d="M0 0h24v24H0z"></path><path fill="currentColor" d="M8 3v.5A1.5 1.5 0 0 0 9.5 5h5A1.5 1.5 0 0 0 16 3.5V3h2a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h2Z" opacity=".3"></path><path fill="currentColor" d="M11 2a1 1 0 0 1 2 0h1.5a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-5a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5H11Z"></path></g></svg></p>
                </button>
                <div class="info-item info-item-is-big">
                    <h6>Country</h6>
                    <p><span class="info-country"><img width="24" height="18" src="${flagUrl || flagPlaceholder}" alt="${sanitize(get(data, 'country_name', ''))} flag" class="info-country-flag" onerror="this.onerror=null; this.src='${flagPlaceholder}';">${sanitize(get(data, 'country_name', ''))}</span></p>
                </div>
            </div>
        </div>
        <div class="info-wrapper">
            <div class="info-item"><h6>City</h6><p>${sanitize(get(data, 'city', ''))}</p></div>
            <div class="info-item"><h6>Country Code</h6><p>${sanitize(get(data, 'country_code', ''))}</p></div>
            <div class="info-item"><h6>Continent</h6><p>${sanitize(get(data, 'continent_code', ''))}</p></div>
            <div class="info-item"><h6>Currency</h6><p>${sanitize(get(data, 'currency.code', ''))}</p></div>
            <div class="info-item"><h6>Carrier</h6><p>${sanitize(get(data, 'carrier.name', ''))}</p></div>
            <div class="info-item"><h6>Time Zone</h6><p>${sanitize(get(data, 'time_zone.name', ''))}</p></div>
            <div class="info-item"><h6>Organisation</h6><p>${sanitize(get(data, 'asn.name', ''))}</p></div>
            <div class="info-item"><h6>Threats</h6><p><span class="info-item-with-icon">${ get(data, 'threat.is_threat', false) ? '<svg width="18" height="18" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z" stroke="#ef4444" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/><path d="M12 8V12" stroke="#ef4444" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/><path d="M12 16H12.01" stroke="#ef4444" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg><span class="text-red-400">Detected</span>' : '<svg width="18" height="18" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M7 12.5L10.75 16L17 9" stroke="#34d399" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path><path d="M23 12C23 18.0751 18.0751 23 12 23C5.92487 23 1 18.0751 1 12C1 5.92487 5.92487 1 12 1C18.0751 1 23 5.92487 23 12Z" stroke="#34d399" stroke-width="2"></path></svg><span class="text-green-400">None Detected</span>' }</span></p></div>
            <div class="info-item info-item-is-threat-level ${trustClass}"><h6>Trust score</h6><p>${sanitize(trustScore >= 0 ? trustScore : 'N/A')} – ${sanitize(trustLevel)}</p></div>
        </div>
    </div>

    <div class="tab-content" role="tabpanel" id="threats-tab">
        <div class="info-wrapper" style="grid-template-columns: repeat(auto-fit, minmax(130px, 1fr));">
             <div class="threats-flag"><p>Tor: ${formatBoolean(get(data, 'threat.is_tor', false))}</p></div>
             <div class="threats-flag"><p>VPN: ${formatBoolean(get(data, 'threat.is_vpn', false))}</p></div>
             <div class="threats-flag"><p>iCloud Relay: ${formatBoolean(get(data, 'threat.is_icloud_relay', false))}</p></div>
             <div class="threats-flag"><p>Proxy: ${formatBoolean(get(data, 'threat.is_proxy', false))}</p></div>
             <div class="threats-flag"><p>Data Center: ${formatBoolean(get(data, 'threat.is_datacenter', false))}</p></div>
             <div class="threats-flag"><p>Anonymous: ${formatBoolean(get(data, 'threat.is_anonymous', false))}</p></div>
             <div class="threats-flag"><p>Attacker: ${formatBoolean(get(data, 'threat.is_known_attacker', false))}</p></div>
             <div class="threats-flag"><p>Abuser: ${formatBoolean(get(data, 'threat.is_known_abuser', false))}</p></div>
             <div class="threats-flag"><p>Threat: ${formatBoolean(get(data, 'threat.is_threat', false))}</p></div>
             <div class="threats-flag"><p>Bogon: ${formatBoolean(get(data, 'threat.is_bogon', false))}</p></div>
        </div>
        <section class="data-section mt-6">
            <h6 class="label">Scores</h6>
            <div class="info-wrapper">
                <div class="info-item"><h6>VPN score</h6><p>${sanitize(get(data, 'threat.scores.vpn_score', 0))}</p></div>
                <div class="info-item"><h6>Proxy score</h6><p>${sanitize(get(data, 'threat.scores.proxy_score', 0))}</p></div>
                <div class="info-item"><h6>Threat score</h6><p>${sanitize(get(data, 'threat.scores.threat_score', 0))}</p></div>
                <div class="info-item"><h6>Trust score</h6><p>${sanitize(get(data, 'threat.scores.trust_score', 0))}</p></div>
            </div>
        </section>
    </div>

    <div class="tab-content" role="tabpanel" id="organisation-tab">
        <section class="data-section">
            <h6 class="label">ASN</h6>
            <div class="info-wrapper info-wrapper-two-cols">
                <div class="info-item"><h6>ASN</h6><p>${sanitize(get(data, 'asn.asn', ''))}</p></div>
                <div class="info-item"><h6>Type</h6><p>${sanitize(get(data, 'asn.type', ''))}</p></div>
                <div class="info-item"><h6>Domain</h6><p>${sanitize(get(data, 'asn.domain', ''))}</p></div>
                <div class="info-item"><h6>Route</h6><p>${sanitize(get(data, 'asn.route', ''))}</p></div>
                <div class="info-item" style="grid-column: 1 / -1;"><h6>Name</h6><p>${sanitize(get(data, 'asn.name', ''))}</p></div>
            </div>
        </section>
        <section class="data-section">
            <h6 class="label">Company</h6>
            <div class="info-wrapper info-wrapper-two-cols">
                <div class="info-item"><h6>Name</h6><p>${sanitize(get(data, 'company.name', ''))}</p></div>
                <div class="info-item"><h6>Domain</h6><p>${sanitize(get(data, 'company.domain', ''))}</p></div>
                <div class="info-item"><h6>Type</h6><p>${sanitize(get(data, 'company.type', ''))}</p></div>
                <div class="info-item"><h6>Network</h6><p>${sanitize(get(data, 'company.network', ''))}</p></div>
            </div>
        </section>
        <section class="data-section">
            <h6 class="label">Carrier</h6>
            <div class="info-wrapper">
                <div class="info-item"><h6>Name</h6><p>${sanitize(get(data, 'carrier.name', ''))}</p></div>
                <div class="info-item"><h6>MCC</h6><p>${sanitize(get(data, 'carrier.mcc', ''))}</p></div>
                <div class="info-item"><h6>MNC</h6><p>${sanitize(get(data, 'carrier.mnc', ''))}</p></div>
            </div>
        </section>
    </div>

     <div class="tab-content" role="tabpanel" id="country-tab">
        <div class="map-ip-country">
             <div class="map-wrapper">
                <img src="${mapImageUrl}" width="230" height="140" class="map" alt="Map placeholder for ${sanitize(ipAddress)}" onerror="this.style.display='none'; this.closest('.map-wrapper').innerHTML='<p class=text-xs text-gray-400>Map N/A</p>';">
            </div>
             <div class="ip-country">
                 <button class="info-item info-item-copy info-item-is-big" title="Click to copy IP" onclick="copyToClipboard('${sanitize(ipAddress)}', this.querySelector('p'))">
                    <h6>IP Address</h6>
                    <p>${sanitize(ipAddress)}<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" class="info-item-copy-icon" viewBox="0 0 24 24"><g fill="none" fill-rule="evenodd"><path d="M0 0h24v24H0z"></path><path fill="currentColor" d="M8 3v.5A1.5 1.5 0 0 0 9.5 5h5A1.5 1.5 0 0 0 16 3.5V3h2a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h2Z" opacity=".3"></path><path fill="currentColor" d="M11 2a1 1 0 0 1 2 0h1.5a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-5a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5H11Z"></path></g></svg></p>
                </button>
                 <div class="info-item info-item-is-big">
                    <h6>Country</h6>
                    <p><span class="info-country"><img width="24" height="18" src="${flagUrl || flagPlaceholder}" alt="${sanitize(get(data, 'country_name', ''))} flag" class="info-country-flag" onerror="this.onerror=null; this.src='${flagPlaceholder}';">${sanitize(get(data, 'country_name', ''))}</span></p>
                </div>
            </div>
        </div>
        <div class="info-wrapper info-wrapper-last">
            <div class="info-item"><h6>Continent Name</h6><p>${sanitize(get(data, 'continent_name', ''))}</p></div>
            <div class="info-item"><h6>Continent Code</h6><p>${sanitize(get(data, 'continent_code', ''))}</p></div>
            <div class="info-item"><h6>Country Name</h6><p>${sanitize(get(data, 'country_name', ''))}</p></div>
            <div class="info-item"><h6>Country Code</h6><p>${sanitize(get(data, 'country_code', ''))}</p></div>
            <div class="info-item"><h6>Region</h6><p>${sanitize(get(data, 'region', ''))}</p></div>
            <div class="info-item"><h6>Region Code</h6><p>${sanitize(get(data, 'region_code', ''))}</p></div>
            <div class="info-item"><h6>Region Type</h6><p>${sanitize(get(data, 'region_type', ''))}</p></div>
            <div class="info-item"><h6>Postal</h6><p>${sanitize(get(data, 'postal', ''))}</p></div>
            <div class="info-item"><h6>Latitude</h6><p>${sanitize(get(data, 'latitude', ''))}</p></div>
            <div class="info-item"><h6>Longitude</h6><p>${sanitize(get(data, 'longitude', ''))}</p></div>
            <div class="info-item"><h6>Calling Code</h6><p>${sanitize(get(data, 'calling_code', ''))}</p></div>
            <div class="info-item"><h6>Emoji Flag</h6><p>${sanitize(get(data, 'emoji_flag', ''))}</p></div>
            <div class="info-item"><h6>Emoji Unicode</h6><p>${sanitize(get(data, 'emoji_unicode', ''))}</p></div>
             <div class="info-item" style="grid-column: 1 / -1;"><h6>Flag URL</h6><p><a href="${sanitize(get(data, 'flag', '#'))}" target="_blank" rel="noopener noreferrer" class="text-blue-400 hover:underline break-all">${sanitize(get(data, 'flag', 'N/A'))}</a></p></div>
        </div>
        <section class="data-section">
            <h6 class="label">Languages</h6>
            <div class="info-wrapper info-wrapper-stacked">
                ${(Array.isArray(get(data, 'languages', [])) ? get(data, 'languages', []) : [])
                    .map(lang => `
                        <div class="info-item" style="display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 0.5rem;">
                            <div><h6>Name</h6><p>${sanitize(get(lang, 'name', ''))}</p></div>
                            <div><h6>Native</h6><p>${sanitize(get(lang, 'native', ''))}</p></div>
                            <div><h6>Code</h6><p>${sanitize(get(lang, 'code', ''))}</p></div>
                        </div>
                    `).join('')}
                ${(Array.isArray(get(data, 'languages', [])) ? get(data, 'languages', []) : []).length === 0 ? '<div class="info-item"><p class="text-gray-400 italic">No language data available.</p></div>' : ''}
            </div>
        </section>
        <section class="data-section">
            <h6 class="label">Currency</h6>
            <div class="info-wrapper">
                <div class="info-item"><h6>Name</h6><p>${sanitize(get(data, 'currency.name', ''))}</p></div>
                <div class="info-item"><h6>Code</h6><p>${sanitize(get(data, 'currency.code', ''))}</p></div>
                <div class="info-item"><h6>Symbol</h6><p>${sanitize(get(data, 'currency.symbol', ''))}</p></div>
                <div class="info-item"><h6>Native</h6><p>${sanitize(get(data, 'currency.native', ''))}</p></div>
                <div class="info-item"><h6>Plural</h6><p>${sanitize(get(data, 'currency.plural', ''))}</p></div>
            </div>
        </section>
        <section class="data-section">
            <h6 class="label">Time Zone</h6>
            <div class="info-wrapper">
                <div class="info-item"><h6>Name</h6><p>${sanitize(get(data, 'time_zone.name', ''))}</p></div>
                <div class="info-item"><h6>Abbr</h6><p>${sanitize(get(data, 'time_zone.abbr', ''))}</p></div>
                <div class="info-item"><h6>Offset</h6><p>${sanitize(get(data, 'time_zone.offset', ''))}</p></div>
                <div class="info-item"><h6>Is DST</h6><p>${formatBoolean(get(data, 'time_zone.is_dst', false), 'Yes', 'No')}</p></div>
                <div class="info-item" style="grid-column: 1 / -1;"><h6>Current Time</h6><p>${sanitize(get(data, 'time_zone.current_time', ''))}</p></div>
            </div>
        </section>
    </div>

    <div class="tab-content" role="tabpanel" id="raw-data-tab">
        <h6 class="label mb-2">Raw Simulated Data</h6>
        <pre><code class="raw-data json hljs">${sanitize(JSON.stringify(data, null, 2))}</code></pre>
    </div>
</div>`; // End Tabs container
            return html;
        }


        // Generates HTML for Social Media Check Results (Simulation)
        function generateSocialResultHtml(data) {
             // Expects data to be { twitter: { linked: boolean, error: string|null }, instagram: {...}, snapchat: {...} }
             const platformData = data || {};
             const platformIcons = {
                twitter: '<svg class="social-icon" fill="currentColor" viewBox="0 0 24 24"><path d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z"></path></svg>',
                instagram: '<svg class="social-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24"><rect width="20" height="20" x="2" y="2" rx="5" ry="5"></rect><path d="M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z"></path><line x1="17.5" x2="17.51" y1="6.5" y2="6.5"></line></svg>',
                snapchat: '<svg class="social-icon" fill="#FFFC00" viewBox="0 0 24 24"><path d="M12.006 1.076c-2.862 0-4.39.116-5.903.335-1.688.247-3.135.8-4.22 1.886C.8 4.384.248 5.83.001 7.518-.218 9.03-.334 10.558-.334 13.42c0 2.862.116 4.39.335 5.903.247 1.688.8 3.135 1.886 4.22 1.087 1.086 2.533 1.638 4.22 1.886 1.514.219 3.042.335 5.903.335 2.862 0 4.39-.116 5.903-.335 1.688-.248 3.135-.8 4.22-1.886 1.086-1.086 1.638-2.533 1.886-4.22.219-1.514.335-3.042.335-5.903 0-2.862-.116-4.39-.335-5.903-.248-1.688-.8-3.135-1.886-4.22-1.086-1.086-2.532-1.638-4.22-1.886-1.513-.219-3.041-.335-5.903-.335z"></path></svg>'
             };

             let html = '<div class="results-display-container social-results-container"><div class="info-wrapper">';

             Object.keys(platformIcons).forEach(key => {
                const result = platformData[key];
                let statusHtml = '<span class="text-gray-400">Checking...</span>'; // Default

                if (result) {
                    if (result.error) {
                        statusHtml = `<span class="text-yellow-400">${sanitize(result.error)}</span>`;
                    } else if (typeof result.linked === 'boolean') {
                        statusHtml = formatBoolean(result.linked, 'Linked', 'Not Linked');
                    } else {
                         statusHtml = '<span class="text-gray-400">Unknown Status</span>';
                    }
                } else {
                     statusHtml = '<span class="text-gray-400">No Data</span>';
                }

                html += `<div class="info-item" data-platform="${key}">
                            <h6>${platformIcons[key]} ${sanitize(key.charAt(0).toUpperCase() + key.slice(1))}</h6>
                            <p>${statusHtml}</p>
                         </div>`;
             });

             html += '</div></div>';
             return html;
        }


        // --- Helper Function to Setup IP Result Internal Tabs ---
        function setupIpResultTabs(containerElement) {
            const tabs = containerElement.querySelectorAll('.tabs .tab');
            const tabContents = containerElement.querySelectorAll('.tabs .tab-content');
            if (!tabs.length || !tabContents.length) return; // Don't run if elements aren't there

            tabs.forEach(tab => {
                // Remove existing listeners to prevent duplicates if called multiple times
                const newTab = tab.cloneNode(true);
                tab.parentNode.replaceChild(newTab, tab);

                newTab.addEventListener('click', () => {
                    const targetId = newTab.getAttribute('data-tab-target');
                    const targetContent = containerElement.querySelector(`#${targetId}`);

                    // Update active states
                    containerElement.querySelectorAll('.tabs .tab').forEach(t => t.classList.remove('tab-is-active'));
                    containerElement.querySelectorAll('.tabs .tab-content').forEach(c => c.classList.remove('tab-content-is-visible'));

                    newTab.classList.add('tab-is-active');
                    if (targetContent) {
                        targetContent.classList.add('tab-content-is-visible');
                    } else {
                         console.warn(`Target content not found for tab: ${targetId}`);
                    }
                });
            });

             // Ensure the first tab is active by default if none are
            const activeTab = containerElement.querySelector('.tabs .tab.tab-is-active');
            if (!activeTab && tabs.length > 0) {
                tabs[0].classList.add('tab-is-active');
                 const firstContentId = tabs[0].getAttribute('data-tab-target');
                 const firstContent = containerElement.querySelector(`#${firstContentId}`);
                 if (firstContent) {
                    firstContent.classList.add('tab-content-is-visible');
                 }
            } else if (activeTab) {
                 // Ensure the corresponding content for the explicitly active tab is shown
                 const activeContentId = activeTab.getAttribute('data-tab-target');
                 const activeContent = containerElement.querySelector(`#${activeContentId}`);
                 if (activeContent) {
                     activeContent.classList.add('tab-content-is-visible');
                 }
            }
        }

        // --- Enter Key Listener ---
        document.querySelectorAll('.dashboard-input').forEach(input => {
            input.addEventListener('keypress', function(event) {
                if (event.key === 'Enter') {
                    event.preventDefault(); // Prevent default form submission
                    // Find the button within the same tab pane and click it
                    const searchButton = this.closest('.tab-pane').querySelector('.dashboard-button');
                    if (searchButton) {
                        searchButton.click();
                    }
                }
            });
        });

        // --- Initial Setup ---
        // Ensure the first tab's content is visible on load
        document.addEventListener('DOMContentLoaded', () => {
            const firstActiveTab = document.querySelector('.dashboard-tab.active');
            if (firstActiveTab) {
                const targetPaneId = firstActiveTab.getAttribute('data-tab') + '-content';
                const targetPane = document.getElementById(targetPaneId);
                if (targetPane) {
                    targetPane.classList.add('active');
                }
            }
        });

    </script>
</body>
</html>
